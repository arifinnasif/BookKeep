-- PREREQ: sequence__order_id_auto_increment_seq.sql


CREATE OR REPLACE PROCEDURE MAKE_ORDER(ARG_CUSTOMER_ID IN VARCHAR2, ARG_ORDERING_DATE IN DATE) IS
        CNT_CSTMR_IN_CARTS NUMBER;
        O_ID NUMBER;
        U_PRICE NUMBER; -- UNIT PRICE
    BEGIN
        SELECT COUNT(*) INTO CNT_CSTMR_IN_CARTS FROM CARTS WHERE CUSTOMER_ID = ARG_CUSTOMER_ID;
        IF CNT_CSTMR_IN_CARTS <> 0 THEN
            O_ID := ORDER_ID_AUTOINCREMENT_SEQ.NEXTVAL;
            INSERT INTO ORDERS (ORDER_ID, CUSTOMER_ID, ORDERING_DATE) VALUES (O_ID, ARG_CUSTOMER_ID, ARG_ORDERING_DATE);
            FOR R IN (
                    SELECT ISBN, B.PRICE AS B_PRICE, CRT.QUANTITY AS CRT_QUANTITY, TOTAL_DCT_PCT AS OFR_TOTAL_DCT_PCT
                    FROM BOOKS B
                    INNER JOIN CARTS CRT USING (ISBN)
                    LEFT OUTER JOIN
                        (
                            SELECT SUM(DISCOUNT_PCT) AS TOTAL_DCT_PCT, ISBN
                            FROM OFFER_BOOK
                            INNER JOIN OFFERS USING(OFFER_ID)
                            WHERE (START_DATE + PERIOD) >= ARG_ORDERING_DATE AND START_DATE <= ARG_ORDERING_DATE
                            GROUP BY ISBN -- UNNECESSARY. AS ISBN IS A PK IN OFFER_BOOK BUT STILL
                        ) OFR USING (ISBN) WHERE CUSTOMER_ID = ARG_CUSTOMER_ID
                )
                LOOP
                U_PRICE := R.B_PRICE * (1.0 - NVL(R.OFR_TOTAL_DCT_PCT, 0));
                INSERT INTO ORDER_BOOK(ORDER_ID, ISBN, UNIT_PRICE, QUANTITY) VALUES (O_ID, R.ISBN, U_PRICE, R.CRT_QUANTITY);

                END LOOP;
            DELETE FROM CARTS WHERE CUSTOMER_ID = ARG_CUSTOMER_ID;
        END IF;
    END;
/
